
Q1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  000001b2  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  0000021a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000249  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000257  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078c  00000000  00000000  00000287  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000517  00000000  00000000  00000a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000206  00000000  00000000  00000f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  0000132a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000138  00000138  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000030  000000ae  000000ae  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 00000022  000000de  000000de  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_2 00000022  00000100  00000100  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.c        00000001  00800060  00800060  0000021a  2**0
                  ALLOC
 18 .text.__dummy_fini 00000002  00000140  00000140  00000214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  00000142  00000142  00000216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  00000144  00000144  00000218  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  00000122  00000122  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  0000013c  0000013c  00000210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_1>
   8:	0c 94 80 00 	jmp	0x100	; 0x100 <__vector_2>
   c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  10:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  14:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  18:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  1c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  20:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  24:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  28:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  30:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  38:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  3c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  40:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  44:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  48:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  4c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>
  50:	0c 94 9c 00 	jmp	0x138	; 0x138 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 61       	ori	r16, 0x10	; 16
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 57 00 	call	0xae	; 0xae <_etext>
  a6:	0c 94 91 00 	jmp	0x122	; 0x122 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000138 <__bad_interrupt>:
 138:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000ae <main>:
{
	//MCUCR
	//MCUSCR
	//GICR
	//SREG
	DDRC=0xFF;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	84 bb       	out	0x14, r24	; 20
	SET_BIT(SREG,7);
  b2:	8f b7       	in	r24, 0x3f	; 63
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	8f bf       	out	0x3f, r24	; 63
	SET_BIT(PORTD,2);
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,3);
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	82 bb       	out	0x12, r24	; 18
	SET_BIT(GICR,6);
  c4:	8b b7       	in	r24, 0x3b	; 59
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,7);
  ca:	8b b7       	in	r24, 0x3b	; 59
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,1);
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	85 bf       	out	0x35, r24	; 53
	
    while(1)
    {
	PORTC=c;
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  da:	85 bb       	out	0x15, r24	; 21
  dc:	fc cf       	rjmp	.-8      	; 0xd6 <main+0x28>

Disassembly of section .text.__vector_1:

000000de <__vector_1>:
    }
}
ISR(INT0_vect){
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	8f 93       	push	r24
	c++;
  ea:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ee:	8f 5f       	subi	r24, 0xFF	; 255
  f0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

Disassembly of section .text.__vector_2:

00000100 <__vector_2>:
ISR(INT1_vect){
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
	c--;
 10c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 110:	81 50       	subi	r24, 0x01	; 1
 112:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 116:	8f 91       	pop	r24
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

Disassembly of section .text.__dummy_fini:

00000140 <_fini>:
 140:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000142 <__funcs_on_exit>:
 142:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000144 <__simulator_exit>:
 144:	08 95       	ret

Disassembly of section .text.exit:

00000122 <exit>:
 122:	ec 01       	movw	r28, r24
 124:	0e 94 a1 00 	call	0x142	; 0x142 <__funcs_on_exit>
 128:	0e 94 a0 00 	call	0x140	; 0x140 <_fini>
 12c:	ce 01       	movw	r24, r28
 12e:	0e 94 a2 00 	call	0x144	; 0x144 <__simulator_exit>
 132:	ce 01       	movw	r24, r28
 134:	0e 94 9e 00 	call	0x13c	; 0x13c <_Exit>

Disassembly of section .text._Exit:

0000013c <_Exit>:
 13c:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
