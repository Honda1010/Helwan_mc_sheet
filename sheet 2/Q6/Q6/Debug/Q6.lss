
Q6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000b0  00000220  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  0000029d  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007db  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053a  00000000  00000000  00000ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023e  00000000  00000000  0000101f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bf  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001529  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001a6  000001a6  0000027a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000154c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .rodata       00000014  00800060  000001b4  00000288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 15 .text.main    0000009c  000000b0  000000b0  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_1 00000022  0000014c  0000014c  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_2 00000022  0000016e  0000016e  00000242  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .data.c       00000001  00800074  000001c8  0000029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .text.__dummy_fini 00000002  000001ae  000001ae  00000282  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  000001b0  000001b0  00000284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  000001b2  000001b2  00000286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  00000190  00000190  00000264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  000001aa  000001aa  0000027e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_1>
   8:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_2>
   c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
  50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 75       	andi	r16, 0x50	; 80
  58:	00 01       	movw	r0, r0
  5a:	b4 00       	.word	0x00b4	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <_etext>
  a8:	0c 94 c8 00 	jmp	0x190	; 0x190 <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

000001a6 <__bad_interrupt>:
 1a6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000b0 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
unsigned char c=9,b=0,a=0;
int main(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	64 97       	sbiw	r28, 0x14	; 20
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
	//MCUCR
	//MCUSCR
	//GICR
	//SREG
	DDRC=0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	84 bb       	out	0x14, r24	; 20
	DDRA=0xFF;
  c8:	8a bb       	out	0x1a, r24	; 26
	DDRD=0x03;
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	81 bb       	out	0x11, r24	; 17
	SET_BIT(SREG,7);
  ce:	8f b7       	in	r24, 0x3f	; 63
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	8f bf       	out	0x3f, r24	; 63
	SET_BIT(PORTD,1);// green led
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,2);// internal pullup
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,3);// internal pullup
  e0:	82 b3       	in	r24, 0x12	; 18
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	82 bb       	out	0x12, r24	; 18
	SET_BIT(GICR,6); 
  e6:	8b b7       	in	r24, 0x3b	; 59
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,7);
  ec:	8b b7       	in	r24, 0x3b	; 59
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,1); // failing edge int0
  f2:	85 b7       	in	r24, 0x35	; 53
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,3); // failing edge int1
  f8:	85 b7       	in	r24, 0x35	; 53
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	85 bf       	out	0x35, r24	; 53
	SET_BIT(PORTC,6);
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	80 64       	ori	r24, 0x40	; 64
 102:	85 bb       	out	0x15, r24	; 21
	SET_BIT(PORTC,7);
 104:	85 b3       	in	r24, 0x15	; 21
 106:	80 68       	ori	r24, 0x80	; 128
 108:	85 bb       	out	0x15, r24	; 21
	unsigned int num[10]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
 10a:	84 e1       	ldi	r24, 0x14	; 20
 10c:	e0 e6       	ldi	r30, 0x60	; 96
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	de 01       	movw	r26, r28
 112:	11 96       	adiw	r26, 0x01	; 1
 114:	01 90       	ld	r0, Z+
 116:	0d 92       	st	X+, r0
 118:	8a 95       	dec	r24
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x64>
    while(1)
    {
	PORTA=num[c];
 11c:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <c>
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	8c 0f       	add	r24, r28
 12c:	9d 1f       	adc	r25, r29
 12e:	e8 0f       	add	r30, r24
 130:	f9 1f       	adc	r31, r25
 132:	80 81       	ld	r24, Z
 134:	8b bb       	out	0x1b, r24	; 27
	if (c==0)
 136:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <c>
 13a:	81 11       	cpse	r24, r1
 13c:	ef cf       	rjmp	.-34     	; 0x11c <main+0x6c>
	{
		CLR_BIT(PORTD,1);
 13e:	82 b3       	in	r24, 0x12	; 18
 140:	8d 7f       	andi	r24, 0xFD	; 253
 142:	82 bb       	out	0x12, r24	; 18
	 SET_BIT(PORTD,0);	
 144:	82 b3       	in	r24, 0x12	; 18
 146:	81 60       	ori	r24, 0x01	; 1
 148:	82 bb       	out	0x12, r24	; 18
 14a:	e8 cf       	rjmp	.-48     	; 0x11c <main+0x6c>

Disassembly of section .text.__vector_1:

0000014c <__vector_1>:
	 
	}

    }
}
ISR(INT0_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
		c++;
 158:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <c>
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <c>
}
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

Disassembly of section .text.__vector_2:

0000016e <__vector_2>:
ISR(INT1_vect){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	8f 93       	push	r24
		c--;
 17a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <c>
 17e:	81 50       	subi	r24, 0x01	; 1
 180:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <c>
 184:	8f 91       	pop	r24
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

Disassembly of section .text.__dummy_fini:

000001ae <_fini>:
 1ae:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001b0 <__funcs_on_exit>:
 1b0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001b2 <__simulator_exit>:
 1b2:	08 95       	ret

Disassembly of section .text.exit:

00000190 <exit>:
 190:	ec 01       	movw	r28, r24
 192:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__funcs_on_exit>
 196:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_fini>
 19a:	ce 01       	movw	r24, r28
 19c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__simulator_exit>
 1a0:	ce 01       	movw	r24, r28
 1a2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Exit>

Disassembly of section .text._Exit:

000001aa <_Exit>:
 1aa:	0e 94 56 00 	call	0xac	; 0xac <_exit>
