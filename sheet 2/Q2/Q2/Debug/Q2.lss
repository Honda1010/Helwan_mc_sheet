
Q2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a6  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001d5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078c  00000000  00000000  00000213  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000517  00000000  00000000  0000099f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fc  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000010b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001326  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000124  00000124  00000198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000002a  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 0000001e  000000d2  000000d2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_2 0000001e  000000f0  000000f0  00000164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  0000012c  0000012c  000001a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  0000012e  0000012e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000130  00000130  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  0000010e  0000010e  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  00000128  00000128  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_1>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_2>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	e4 e5       	ldi	r30, 0x54	; 84
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	17 c0       	rjmp	.+46     	; 0x96 <__do_clear_bss+0x8>
  68:	b5 91       	lpm	r27, Z+
  6a:	a5 91       	lpm	r26, Z+
  6c:	35 91       	lpm	r19, Z+
  6e:	25 91       	lpm	r18, Z+
  70:	05 91       	lpm	r16, Z+
  72:	07 fd       	sbrc	r16, 7
  74:	0c c0       	rjmp	.+24     	; 0x8e <__do_clear_bss>
  76:	95 91       	lpm	r25, Z+
  78:	85 91       	lpm	r24, Z+
  7a:	ef 01       	movw	r28, r30
  7c:	f9 2f       	mov	r31, r25
  7e:	e8 2f       	mov	r30, r24
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 17       	cp	r26, r18
  86:	b3 07       	cpc	r27, r19
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0x20>
  8a:	fe 01       	movw	r30, r28
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_clear_bss+0x8>

0000008e <__do_clear_bss>:
  8e:	1d 92       	st	X+, r1
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	e1 f7       	brne	.-8      	; 0x8e <__do_clear_bss>
  96:	e4 35       	cpi	r30, 0x54	; 84
  98:	f4 07       	cpc	r31, r20
  9a:	31 f7       	brne	.-52     	; 0x68 <__do_copy_data+0x8>
  9c:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
  a0:	0c 94 87 00 	jmp	0x10e	; 0x10e <exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

00000124 <__bad_interrupt>:
 124:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000a8 <main>:
{
	//MCUCR
	//MCUSCR
	//GICR
	//SREG
	DDRC=0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
	SET_BIT(SREG,7);
  ac:	8f b7       	in	r24, 0x3f	; 63
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	8f bf       	out	0x3f, r24	; 63
	SET_BIT(PORTD,2);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	84 60       	ori	r24, 0x04	; 4
  b6:	82 bb       	out	0x12, r24	; 18
	SET_BIT(PORTD,3);
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	82 bb       	out	0x12, r24	; 18
	SET_BIT(GICR,6);
  be:	8b b7       	in	r24, 0x3b	; 59
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,7);
  c4:	8b b7       	in	r24, 0x3b	; 59
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(MCUCR,1);
  ca:	85 b7       	in	r24, 0x35	; 53
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	85 bf       	out	0x35, r24	; 53
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x28>

Disassembly of section .text.__vector_1:

000000d2 <__vector_1>:
	
    while(1)
    {
    }
}
ISR(INT0_vect){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
	SET_BIT(PORTC,0);
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	85 bb       	out	0x15, r24	; 21
}
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

Disassembly of section .text.__vector_2:

000000f0 <__vector_2>:
ISR(INT1_vect){
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
	CLR_BIT(PORTC,0);
  fc:	85 b3       	in	r24, 0x15	; 21
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	85 bb       	out	0x15, r24	; 21
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

Disassembly of section .text.__dummy_fini:

0000012c <_fini>:
 12c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000012e <__funcs_on_exit>:
 12e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000130 <__simulator_exit>:
 130:	08 95       	ret

Disassembly of section .text.exit:

0000010e <exit>:
 10e:	ec 01       	movw	r28, r24
 110:	0e 94 97 00 	call	0x12e	; 0x12e <__funcs_on_exit>
 114:	0e 94 96 00 	call	0x12c	; 0x12c <_fini>
 118:	ce 01       	movw	r24, r28
 11a:	0e 94 98 00 	call	0x130	; 0x130 <__simulator_exit>
 11e:	ce 01       	movw	r24, r28
 120:	0e 94 94 00 	call	0x128	; 0x128 <_Exit>

Disassembly of section .text._Exit:

00000128 <_Exit>:
 128:	0e 94 52 00 	call	0xa4	; 0xa4 <_exit>
