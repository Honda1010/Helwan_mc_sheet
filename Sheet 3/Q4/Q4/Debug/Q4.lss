
Q4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ee  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000031d  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000032b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000123c  00000000  00000000  000003bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000848  00000000  00000000  000015f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000052c  00000000  00000000  00001e3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  0000236c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022c  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000588  00000000  00000000  000026b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000026c  0000026c  000002e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.lcd_send_half 00000020  000001d6  000001d6  0000024a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write_cmd 0000002a  00000182  00000182  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_clear 00000016  00000210  00000210  00000284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_init 0000009a  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_gotoxy 00000014  0000023c  0000023c  000002b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_write_data 0000002a  000001ac  000001ac  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_putc 0000000e  00000250  00000250  000002c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.lcd_puts 0000002c  00000156  00000156  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.init_adc 0000000e  0000025e  0000025e  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.read_adc 0000001a  000001f6  000001f6  0000026a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.main    00000050  00000106  00000106  0000017a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_fini 00000002  00000274  00000274  000002e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_funcs_on_exit 00000002  00000276  00000276  000002ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_simulator_exit 00000002  00000278  00000278  000002ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.exit    00000016  00000226  00000226  0000029a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text._Exit   00000004  00000270  00000270  000002e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
   8:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
   c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  10:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  14:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  18:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  1c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  20:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  24:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  28:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  2c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  30:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  34:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  38:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  3c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  40:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  44:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  48:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  4c:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>
  50:	0c 94 36 01 	jmp	0x26c	; 0x26c <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 83 00 	call	0x106	; 0x106 <main>
  64:	0c 94 13 01 	jmp	0x226	; 0x226 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

0000026c <__bad_interrupt>:
 26c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_send_half:

000001d6 <lcd_send_half>:
	lcd_send_half(data);
	_delay_us(100);
}

void lcd_send_half(uint8_t value) {
	LCD_PORT = (LCD_PORT & 0x0F) | (value << 4);
 1d6:	25 b3       	in	r18, 0x15	; 21
 1d8:	30 e1       	ldi	r19, 0x10	; 16
 1da:	83 9f       	mul	r24, r19
 1dc:	c0 01       	movw	r24, r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 70       	andi	r18, 0x0F	; 15
 1e2:	82 2b       	or	r24, r18
 1e4:	85 bb       	out	0x15, r24	; 21
	LCD_PORT |= (1 << EN_PIN);
 1e6:	85 b3       	in	r24, 0x15	; 21
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	00 00       	nop
	_delay_us(1);
	LCD_PORT &= ~(1 << EN_PIN);
 1ee:	85 b3       	in	r24, 0x15	; 21
 1f0:	8b 7f       	andi	r24, 0xFB	; 251
 1f2:	85 bb       	out	0x15, r24	; 21
 1f4:	08 95       	ret

Disassembly of section .text.lcd_write_cmd:

00000182 <lcd_write_cmd>:
	while (*s) {
		lcd_putc(*s++);
	}
}

void lcd_write_cmd(uint8_t cmd) {
 182:	cf 93       	push	r28
 184:	c8 2f       	mov	r28, r24
	LCD_PORT &= ~(1 << RS_PIN);
 186:	85 b3       	in	r24, 0x15	; 21
 188:	8d 7f       	andi	r24, 0xFD	; 253
 18a:	85 bb       	out	0x15, r24	; 21
	lcd_send_half(cmd >> 4);
 18c:	8c 2f       	mov	r24, r28
 18e:	82 95       	swap	r24
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_send_half>
	lcd_send_half(cmd);
 198:	8c 2f       	mov	r24, r28
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_send_half>
 1a0:	81 e2       	ldi	r24, 0x21	; 33
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_write_cmd+0x20>
 1a6:	00 00       	nop
	_delay_us(100);
}
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

Disassembly of section .text.lcd_clear:

00000210 <lcd_clear>:
	_delay_us(100);
	lcd_write_cmd(dispAttr);
}

void lcd_clear() {
	lcd_write_cmd(0x01);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_write_cmd>
 218:	83 ef       	ldi	r24, 0xF3	; 243
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <lcd_clear+0xc>
 220:	00 c0       	rjmp	.+0      	; 0x222 <lcd_clear+0x12>
 222:	00 00       	nop
 224:	08 95       	ret

Disassembly of section .text.lcd_init:

0000006c <lcd_init>:
 * Created: 4/24/2024 3:35:39 AM
 *  Author: mohaned
 */ 
#include "lcd.h"

void lcd_init(uint8_t dispAttr) {
  6c:	cf 93       	push	r28
  6e:	c8 2f       	mov	r28, r24
	LCD_DDR |= (1 << RS_PIN) | (1 << EN_PIN) | (1 << D4_PIN) | (1 << D5_PIN) | (1 << D6_PIN) | (1 << D7_PIN);
  70:	84 b3       	in	r24, 0x14	; 20
  72:	8e 67       	ori	r24, 0x7E	; 126
  74:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  76:	85 ea       	ldi	r24, 0xA5	; 165
  78:	9e e0       	ldi	r25, 0x0E	; 14
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <lcd_init+0xe>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <lcd_init+0x14>
  80:	00 00       	nop
	_delay_ms(15);
	lcd_write_cmd(0x03);
  82:	83 e0       	ldi	r24, 0x03	; 3
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_write_cmd>
  8a:	81 ee       	ldi	r24, 0xE1	; 225
  8c:	94 e0       	ldi	r25, 0x04	; 4
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_init+0x22>
  92:	00 c0       	rjmp	.+0      	; 0x94 <lcd_init+0x28>
  94:	00 00       	nop
	_delay_ms(5);
	lcd_write_cmd(0x03);
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_write_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	91 e2       	ldi	r25, 0x21	; 33
  a0:	9a 95       	dec	r25
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_init+0x34>
  a4:	00 00       	nop
	_delay_us(100);
	lcd_write_cmd(0x03);
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_write_cmd>
  ae:	81 e2       	ldi	r24, 0x21	; 33
  b0:	8a 95       	dec	r24
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_init+0x44>
  b4:	00 00       	nop
	_delay_us(100);
	lcd_write_cmd(0x02);
  b6:	82 e0       	ldi	r24, 0x02	; 2
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_write_cmd>
  be:	91 e2       	ldi	r25, 0x21	; 33
  c0:	9a 95       	dec	r25
  c2:	f1 f7       	brne	.-4      	; 0xc0 <lcd_init+0x54>
  c4:	00 00       	nop
	_delay_us(100);
	lcd_write_cmd(0x28);
  c6:	88 e2       	ldi	r24, 0x28	; 40
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_write_cmd>
  ce:	81 e2       	ldi	r24, 0x21	; 33
  d0:	8a 95       	dec	r24
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_init+0x64>
  d4:	00 00       	nop
	_delay_us(100);
	lcd_write_cmd(0x08);
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_write_cmd>
  de:	91 e2       	ldi	r25, 0x21	; 33
  e0:	9a 95       	dec	r25
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_init+0x74>
  e4:	00 00       	nop
	_delay_us(100);
	lcd_clear();
  e6:	0e 94 08 01 	call	0x210	; 0x210 <lcd_clear>
	lcd_write_cmd(0x06);
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_write_cmd>
  f2:	81 e2       	ldi	r24, 0x21	; 33
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_init+0x88>
  f8:	00 00       	nop
	_delay_us(100);
	lcd_write_cmd(dispAttr);
  fa:	8c 2f       	mov	r24, r28
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_write_cmd>
}
 102:	cf 91       	pop	r28
 104:	08 95       	ret

Disassembly of section .text.lcd_gotoxy:

0000023c <lcd_gotoxy>:
	_delay_us(2000);
}

void lcd_gotoxy(uint8_t x, uint8_t y) {
	uint8_t addr = 0x80;
	if (y == 1) {
 23c:	61 30       	cpi	r22, 0x01	; 1
 23e:	19 f4       	brne	.+6      	; 0x246 <lcd_gotoxy+0xa>
		addr |= (0x40 + x);
 240:	80 5c       	subi	r24, 0xC0	; 192
 242:	80 68       	ori	r24, 0x80	; 128
 244:	01 c0       	rjmp	.+2      	; 0x248 <lcd_gotoxy+0xc>
		} else {
		addr |= x;
 246:	80 68       	ori	r24, 0x80	; 128
	}
	lcd_write_cmd(addr);
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_write_cmd>
 24e:	08 95       	ret

Disassembly of section .text.lcd_write_data:

000001ac <lcd_write_data>:
	lcd_send_half(cmd >> 4);
	lcd_send_half(cmd);
	_delay_us(100);
}

void lcd_write_data(uint8_t data) {
 1ac:	cf 93       	push	r28
 1ae:	c8 2f       	mov	r28, r24
	LCD_PORT |= (1 << RS_PIN);
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	82 60       	ori	r24, 0x02	; 2
 1b4:	85 bb       	out	0x15, r24	; 21
	lcd_send_half(data >> 4);
 1b6:	8c 2f       	mov	r24, r28
 1b8:	82 95       	swap	r24
 1ba:	8f 70       	andi	r24, 0x0F	; 15
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_send_half>
	lcd_send_half(data);
 1c2:	8c 2f       	mov	r24, r28
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <lcd_send_half>
 1ca:	81 e2       	ldi	r24, 0x21	; 33
 1cc:	8a 95       	dec	r24
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_write_data+0x20>
 1d0:	00 00       	nop
	_delay_us(100);
}
 1d2:	cf 91       	pop	r28
 1d4:	08 95       	ret

Disassembly of section .text.lcd_putc:

00000250 <lcd_putc>:
	}
	lcd_write_cmd(addr);
}

void lcd_putc(char c) {
	LCD_PORT |= (1 << RS_PIN);
 250:	95 b3       	in	r25, 0x15	; 21
 252:	92 60       	ori	r25, 0x02	; 2
 254:	95 bb       	out	0x15, r25	; 21
	lcd_write_data(c);
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_write_data>
 25c:	08 95       	ret

Disassembly of section .text.lcd_puts:

00000156 <lcd_puts>:
}

void lcd_puts(const char *s) {
 156:	cf 92       	push	r12
 158:	df 92       	push	r13
 15a:	ef 92       	push	r14
 15c:	6b 01       	movw	r12, r22
 15e:	e8 2e       	mov	r14, r24
	while (*s) {
 160:	06 c0       	rjmp	.+12     	; 0x16e <lcd_puts+0x18>
		lcd_putc(*s++);
 162:	9f ef       	ldi	r25, 0xFF	; 255
 164:	c9 1a       	sub	r12, r25
 166:	d9 0a       	sbc	r13, r25
 168:	e9 0a       	sbc	r14, r25
 16a:	0e 94 28 01 	call	0x250	; 0x250 <lcd_putc>
	LCD_PORT |= (1 << RS_PIN);
	lcd_write_data(c);
}

void lcd_puts(const char *s) {
	while (*s) {
 16e:	f6 01       	movw	r30, r12
 170:	84 91       	lpm	r24, Z
 172:	e7 fc       	sbrc	r14, 7
 174:	80 81       	ld	r24, Z
 176:	81 11       	cpse	r24, r1
 178:	f4 cf       	rjmp	.-24     	; 0x162 <lcd_puts+0xc>
		lcd_putc(*s++);
	}
}
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	08 95       	ret

Disassembly of section .text.init_adc:

0000025e <init_adc>:
}

// Initialize ADC
void init_adc() {
	// Set reference voltage to AVCC
	ADMUX |= (1 << REFS0);
 25e:	87 b1       	in	r24, 0x07	; 7
 260:	80 64       	ori	r24, 0x40	; 64
 262:	87 b9       	out	0x07, r24	; 7
	// Enable ADC and set prescaler to 128 for 16MHz clock
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 264:	86 b1       	in	r24, 0x06	; 6
 266:	87 68       	ori	r24, 0x87	; 135
 268:	86 b9       	out	0x06, r24	; 6
 26a:	08 95       	ret

Disassembly of section .text.read_adc:

000001f6 <read_adc>:
}

// Read ADC value from specified channel
uint16_t read_adc(uint8_t channel) {
	// Select ADC channel
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
 1f6:	97 b1       	in	r25, 0x07	; 7
 1f8:	90 7f       	andi	r25, 0xF0	; 240
 1fa:	8f 70       	andi	r24, 0x0F	; 15
 1fc:	89 2b       	or	r24, r25
 1fe:	87 b9       	out	0x07, r24	; 7
	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 200:	86 b1       	in	r24, 0x06	; 6
 202:	80 64       	ori	r24, 0x40	; 64
 204:	86 b9       	out	0x06, r24	; 6
	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
 206:	36 99       	sbic	0x06, 6	; 6
 208:	fe cf       	rjmp	.-4      	; 0x206 <read_adc+0x10>
	// Return ADC result
	return ADC;
 20a:	84 b1       	in	r24, 0x04	; 4
 20c:	95 b1       	in	r25, 0x05	; 5
}
 20e:	08 95       	ret

Disassembly of section .text.main:

00000106 <main>:
// Function prototypes
void init_adc();
uint16_t read_adc(uint8_t channel);
float convert_to_celsius(uint16_t adc_value);

int main(void) {
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	60 97       	sbiw	r28, 0x10	; 16
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
	// Initialize LCD
	lcd_init(LCD_DISP_ON_CURSOR_BLINK);
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	0e 94 36 00 	call	0x6c	; 0x6c <__data_load_end>

	// Initialize ADC
	init_adc();
 120:	0e 94 2f 01 	call	0x25e	; 0x25e <init_adc>
	float temperature_celsius;

	// Main loop
	while (1) {
		// Read ADC value from LM35 sensor
		adc_value = read_adc(0); // Assuming LM35 is connected to ADC0
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <read_adc>

		// Convert ADC value to Celsius
		temperature_celsius = convert_to_celsius(adc_value);

		// Display temperature on LCD
		lcd_clear();
 12a:	0e 94 08 01 	call	0x210	; 0x210 <lcd_clear>
		lcd_gotoxy(0, 0);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 1e 01 	call	0x23c	; 0x23c <lcd_gotoxy>
		char temp_str[16];
		lcd_puts(temp_str);
 136:	be 01       	movw	r22, r28
 138:	6f 5f       	subi	r22, 0xFF	; 255
 13a:	7f 4f       	sbci	r23, 0xFF	; 255
 13c:	80 e8       	ldi	r24, 0x80	; 128
 13e:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	2f e3       	ldi	r18, 0x3F	; 63
 144:	8d e0       	ldi	r24, 0x0D	; 13
 146:	93 e0       	ldi	r25, 0x03	; 3
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x42>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x4c>
 152:	00 00       	nop
 154:	e7 cf       	rjmp	.-50     	; 0x124 <main+0x1e>

Disassembly of section .text.__dummy_fini:

00000274 <_fini>:
 274:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000276 <__funcs_on_exit>:
 276:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000278 <__simulator_exit>:
 278:	08 95       	ret

Disassembly of section .text.exit:

00000226 <exit>:
 226:	ec 01       	movw	r28, r24
 228:	0e 94 3b 01 	call	0x276	; 0x276 <__funcs_on_exit>
 22c:	0e 94 3a 01 	call	0x274	; 0x274 <_fini>
 230:	ce 01       	movw	r24, r28
 232:	0e 94 3c 01 	call	0x278	; 0x278 <__simulator_exit>
 236:	ce 01       	movw	r24, r28
 238:	0e 94 38 01 	call	0x270	; 0x270 <_Exit>

Disassembly of section .text._Exit:

00000270 <_Exit>:
 270:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
