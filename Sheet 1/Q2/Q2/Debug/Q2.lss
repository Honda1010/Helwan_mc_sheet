
Q2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000147  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000155  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000742  00000000  00000000  00000175  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004ee  00000000  00000000  000008b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001b8  00000000  00000000  00000da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000111a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000096  00000096  0000010a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000014  00000082  00000082  000000f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__dummy_fini 00000002  0000009e  0000009e  00000112  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_funcs_on_exit 00000002  000000a0  000000a0  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_simulator_exit 00000002  000000a2  000000a2  00000116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.exit    00000016  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text._Exit   00000004  0000009a  0000009a  0000010e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 00 	call	0x82	; 0x82 <main>
  64:	0c 94 36 00 	jmp	0x6c	; 0x6c <_etext>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000082 <main>:
#include <xc.h>
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	DDRA=0b00000001;
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	8a bb       	out	0x1a, r24	; 26
    while(1)
    {
		if((PINA>>2)&1){
  86:	ca 9b       	sbis	0x19, 2	; 25
  88:	02 c0       	rjmp	.+4      	; 0x8e <main+0xc>
			PORTA=0x01;
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	8b bb       	out	0x1b, r24	; 27
		}
	     if((PINA>>3)&1){
  8e:	cb 9b       	sbis	0x19, 3	; 25
  90:	fa cf       	rjmp	.-12     	; 0x86 <main+0x4>
			PORTA=0x00;
  92:	1b ba       	out	0x1b, r1	; 27
  94:	f8 cf       	rjmp	.-16     	; 0x86 <main+0x4>

Disassembly of section .text.__dummy_fini:

0000009e <_fini>:
  9e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000a0 <__funcs_on_exit>:
  a0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000a2 <__simulator_exit>:
  a2:	08 95       	ret

Disassembly of section .text.exit:

0000006c <exit>:
  6c:	ec 01       	movw	r28, r24
  6e:	0e 94 50 00 	call	0xa0	; 0xa0 <__funcs_on_exit>
  72:	0e 94 4f 00 	call	0x9e	; 0x9e <_fini>
  76:	ce 01       	movw	r24, r28
  78:	0e 94 51 00 	call	0xa2	; 0xa2 <__simulator_exit>
  7c:	ce 01       	movw	r24, r28
  7e:	0e 94 4d 00 	call	0x9a	; 0x9a <_Exit>

Disassembly of section .text._Exit:

0000009a <_Exit>:
  9a:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
