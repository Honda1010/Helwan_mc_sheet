
Q5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000156  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000185  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000193  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000849  00000000  00000000  000001b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000581  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000251  00000000  00000000  00000f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ed  00000000  00000000  0000138a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001477  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000d4  000000d4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000052  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  000000dc  000000dc  00000150  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  000000de  000000de  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  000000e0  000000e0  00000154  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  000000be  000000be  00000132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  000000d8  000000d8  0000014c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  40:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	unsigned char a=0,b=0,d=0;
	DDRA=0b00001111;
  6c:	8f e0       	ldi	r24, 0x0F	; 15
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRB=0x0F;
  70:	87 bb       	out	0x17, r24	; 23
	DDRD=0x0F;
  72:	81 bb       	out	0x11, r24	; 17
#include <xc.h>
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	unsigned char a=0,b=0,d=0;
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	80 e0       	ldi	r24, 0x00	; 0
	DDRA=0b00001111;
	DDRB=0x0F;
	DDRD=0x0F;
    while(1)
    {
		PORTA=a;
  7a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	3f e9       	ldi	r19, 0x9F	; 159
  7e:	46 e8       	ldi	r20, 0x86	; 134
  80:	51 e0       	ldi	r21, 0x01	; 1
  82:	31 50       	subi	r19, 0x01	; 1
  84:	40 40       	sbci	r20, 0x00	; 0
  86:	50 40       	sbci	r21, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x16>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x20>
  8c:	00 00       	nop
		_delay_ms(500);
		PORTB=b;//0 1 2 3 4 5 6 7
  8e:	98 bb       	out	0x18, r25	; 24

		PORTD=d;
  90:	22 bb       	out	0x12, r18	; 18
  92:	3f e9       	ldi	r19, 0x9F	; 159
  94:	46 e8       	ldi	r20, 0x86	; 134
  96:	51 e0       	ldi	r21, 0x01	; 1
  98:	31 50       	subi	r19, 0x01	; 1
  9a:	40 40       	sbci	r20, 0x00	; 0
  9c:	50 40       	sbci	r21, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x2c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x36>
  a2:	00 00       	nop
		_delay_ms(500);
		if ((PINA>>4)&1)
  a4:	cc 9b       	sbis	0x19, 4	; 25
  a6:	07 c0       	rjmp	.+14     	; 0xb6 <main+0x4a>
		{
			a++;
  a8:	8f 5f       	subi	r24, 0xFF	; 255
			if (a>9)
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	08 f0       	brcs	.+2      	; 0xb0 <main+0x44>
			{
				b++;
  ae:	9f 5f       	subi	r25, 0xFF	; 255
			}
			if (b>9)
  b0:	9a 30       	cpi	r25, 0x0A	; 10
  b2:	08 f0       	brcs	.+2      	; 0xb6 <main+0x4a>
			{
				d++;
  b4:	2f 5f       	subi	r18, 0xFF	; 255
			}	
		}
		if ((PINA>>6)&1)
  b6:	ce 9b       	sbis	0x19, 6	; 25
  b8:	e0 cf       	rjmp	.-64     	; 0x7a <main+0xe>
		{
			a--;
  ba:	81 50       	subi	r24, 0x01	; 1
  bc:	de cf       	rjmp	.-68     	; 0x7a <main+0xe>

Disassembly of section .text.__dummy_fini:

000000dc <_fini>:
  dc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000de <__funcs_on_exit>:
  de:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000e0 <__simulator_exit>:
  e0:	08 95       	ret

Disassembly of section .text.exit:

000000be <exit>:
  be:	ec 01       	movw	r28, r24
  c0:	0e 94 6f 00 	call	0xde	; 0xde <__funcs_on_exit>
  c4:	0e 94 6e 00 	call	0xdc	; 0xdc <_fini>
  c8:	ce 01       	movw	r24, r28
  ca:	0e 94 70 00 	call	0xe0	; 0xe0 <__simulator_exit>
  ce:	ce 01       	movw	r24, r28
  d0:	0e 94 6c 00 	call	0xd8	; 0xd8 <_Exit>

Disassembly of section .text._Exit:

000000d8 <_Exit>:
  d8:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
