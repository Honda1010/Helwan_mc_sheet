
Q6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001de  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001de  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  0000020d  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000021b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089f  00000000  00000000  00000243  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005af  00000000  00000000  00000ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000246  00000000  00000000  00001091  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000196  00000000  00000000  0000130c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d8  00000000  00000000  000014a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  0000013c  0000013c  000001d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001594  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.start   00000020  00000106  00000106  0000019a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000058  000000ae  000000ae  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  00000144  00000144  000001d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000146  00000146  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000148  00000148  000001dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000126  00000126  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  00000140  00000140  000001d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
   8:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
   c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  10:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  14:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  18:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  1c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  20:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  24:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  28:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  2c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  30:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  34:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  38:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  3c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  40:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  44:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  48:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  4c:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>
  50:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 62       	ori	r16, 0x20	; 32
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 57 00 	call	0xae	; 0xae <_etext>
  a6:	0c 94 93 00 	jmp	0x126	; 0x126 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

0000013c <__bad_interrupt>:
 13c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.start:

00000106 <start>:
#include <xc.h>
#include <avr/io.h>
#include <util/delay.h>
volatile int counter;
void start(){
	counter=0;
 106:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 10a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	PORTA=0b00001100;
 10e:	8c e0       	ldi	r24, 0x0C	; 12
 110:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f e9       	ldi	r18, 0x9F	; 159
 114:	86 e8       	ldi	r24, 0x86	; 134
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <start+0x12>
 120:	00 c0       	rjmp	.+0      	; 0x122 <start+0x1c>
 122:	00 00       	nop
 124:	08 95       	ret

Disassembly of section .text.main:

000000ae <main>:
	//1 bazzar
	// 2 green 
	// 3 motor
	// 4 sensor
	// 5 start
DDRA=0x0F;
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	8a bb       	out	0x1a, r24	; 26
    while(1)
    {
		if ((PINA>>4)&1) // sensor
  b2:	cc 9b       	sbis	0x19, 4	; 25
  b4:	12 c0       	rjmp	.+36     	; 0xda <main+0x2c>
		{
			counter++;
  b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ba:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  be:	01 96       	adiw	r24, 0x01	; 1
  c0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  c8:	2f e9       	ldi	r18, 0x9F	; 159
  ca:	86 e8       	ldi	r24, 0x86	; 134
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x20>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x2a>
  d8:	00 00       	nop
			_delay_ms(500);
		}
        if (counter==12) // stop
  da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  de:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e2:	0c 97       	sbiw	r24, 0x0c	; 12
  e4:	59 f4       	brne	.+22     	; 0xfc <main+0x4e>
        {
			PORTA=0b00000011;
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	8b bb       	out	0x1b, r24	; 27
  ea:	2f e9       	ldi	r18, 0x9F	; 159
  ec:	86 e8       	ldi	r24, 0x86	; 134
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x42>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x4c>
  fa:	00 00       	nop
			_delay_ms(500);
        }
		if ((PINA>>5)&1)
  fc:	cd 9b       	sbis	0x19, 5	; 25
  fe:	d9 cf       	rjmp	.-78     	; 0xb2 <main+0x4>
		{
			start();
 100:	0e 94 83 00 	call	0x106	; 0x106 <start>
 104:	d6 cf       	rjmp	.-84     	; 0xb2 <main+0x4>

Disassembly of section .text.__dummy_fini:

00000144 <_fini>:
 144:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000146 <__funcs_on_exit>:
 146:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000148 <__simulator_exit>:
 148:	08 95       	ret

Disassembly of section .text.exit:

00000126 <exit>:
 126:	ec 01       	movw	r28, r24
 128:	0e 94 a3 00 	call	0x146	; 0x146 <__funcs_on_exit>
 12c:	0e 94 a2 00 	call	0x144	; 0x144 <_fini>
 130:	ce 01       	movw	r24, r28
 132:	0e 94 a4 00 	call	0x148	; 0x148 <__simulator_exit>
 136:	ce 01       	movw	r24, r28
 138:	0e 94 a0 00 	call	0x140	; 0x140 <_Exit>

Disassembly of section .text._Exit:

00000140 <_Exit>:
 140:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
