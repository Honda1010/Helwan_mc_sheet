
Q4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000142  000001d6  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000205  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000213  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082e  00000000  00000000  00000233  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000593  00000000  00000000  00000a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022c  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  000013ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000149d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000012a  0000012a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000014b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .rodata       0000000a  00800060  00000138  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 15 .text.main    00000064  000000b0  000000b0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  00000132  00000132  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  00000134  00000134  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  00000136  00000136  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    00000016  00000114  00000114  000001a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000004  0000012e  0000012e  000001c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
   8:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
   c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  10:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  14:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  1c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  20:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  24:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  28:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  2c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  30:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  34:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  38:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  3c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  40:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  44:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  48:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  4c:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>
  50:	0c 94 95 00 	jmp	0x12a	; 0x12a <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 6a       	ori	r16, 0xA0	; 160
  58:	00 01       	movw	r0, r0
  5a:	38 00       	.word	0x0038	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <_etext>
  a8:	0c 94 8a 00 	jmp	0x114	; 0x114 <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

0000012a <__bad_interrupt>:
 12a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000b0 <main>:
//#include <xc.h>
#define F_CPU 16000000ul
#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	2a 97       	sbiw	r28, 0x0a	; 10
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
	DDRA=0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a bb       	out	0x1a, r24	; 26
	unsigned char num[10]={63,6,91,79,102,109,125,7,127,111};
  c8:	9a e0       	ldi	r25, 0x0A	; 10
  ca:	e0 e6       	ldi	r30, 0x60	; 96
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	de 01       	movw	r26, r28
  d0:	11 96       	adiw	r26, 0x01	; 1
  d2:	01 90       	ld	r0, Z+
  d4:	0d 92       	st	X+, r0
  d6:	9a 95       	dec	r25
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x22>
		DDRC=0xFF;
  da:	84 bb       	out	0x14, r24	; 20
		PORTC=0b01000000;
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	85 bb       	out	0x15, r24	; 21
    while(1)
    {
		for (int i =0; i<10;i++)
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	13 c0       	rjmp	.+38     	; 0x10c <main+0x5c>
		{
			PORTA=num[i]*2;
  e6:	e1 e0       	ldi	r30, 0x01	; 1
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	ec 0f       	add	r30, r28
  ec:	fd 1f       	adc	r31, r29
  ee:	e8 0f       	add	r30, r24
  f0:	f9 1f       	adc	r31, r25
  f2:	20 81       	ld	r18, Z
  f4:	22 0f       	add	r18, r18
  f6:	2b bb       	out	0x1b, r18	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	39 e6       	ldi	r19, 0x69	; 105
  fc:	48 e1       	ldi	r20, 0x18	; 24
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	30 40       	sbci	r19, 0x00	; 0
 102:	40 40       	sbci	r20, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x4e>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x58>
 108:	00 00       	nop
	unsigned char num[10]={63,6,91,79,102,109,125,7,127,111};
		DDRC=0xFF;
		PORTC=0b01000000;
    while(1)
    {
		for (int i =0; i<10;i++)
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	8a 30       	cpi	r24, 0x0A	; 10
 10e:	91 05       	cpc	r25, r1
 110:	54 f3       	brlt	.-44     	; 0xe6 <main+0x36>
 112:	e6 cf       	rjmp	.-52     	; 0xe0 <main+0x30>

Disassembly of section .text.__dummy_fini:

00000132 <_fini>:
 132:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000134 <__funcs_on_exit>:
 134:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000136 <__simulator_exit>:
 136:	08 95       	ret

Disassembly of section .text.exit:

00000114 <exit>:
 114:	ec 01       	movw	r28, r24
 116:	0e 94 9a 00 	call	0x134	; 0x134 <__funcs_on_exit>
 11a:	0e 94 99 00 	call	0x132	; 0x132 <_fini>
 11e:	ce 01       	movw	r24, r28
 120:	0e 94 9b 00 	call	0x136	; 0x136 <__simulator_exit>
 124:	ce 01       	movw	r24, r28
 126:	0e 94 97 00 	call	0x12e	; 0x12e <_Exit>

Disassembly of section .text._Exit:

0000012e <_Exit>:
 12e:	0e 94 56 00 	call	0xac	; 0xac <_exit>
